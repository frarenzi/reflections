Francesca's Version Control Command review

 git checkout commitID -> to make the commitID the version to run

prompt command for windows: FC old.txt new.txt
prompt command for mac or windows: diff -u old.txt new.txt

each commit should have one clear, logical purpose, and you should never do too much work without committing
sudo apt-get install git
 https://git-scm.com/downloads
git clone https://github.com/udacity/asteroids.git


To clone a repository, run git clone followed by a space and the repository URL.
Asteroids URL

Use the following url to clone the Asteroids repository: https://github.com/udacity/asteroids.git
Exiting git log

To stop viewing git log output, press q (which stands for quit).
Getting Colored Output

To get colored diff output, run git config --global color.ui auto
Copying and Pasting from the Command Line

To complete this quiz, you'll want to copy and paste some commit ids.

Windows
To copy and paste within Git Bash, follow the instructions on this page.

Mac
To copy and paste within the terminal on Mac, use Cmd+C and Cmd+V

Ubuntu
To copy and paste within the terminal on Ubuntu, use Ctrl+Shift+C and Ctrl+Shift+V.
Using git log and git diff

As a reminder, running git log will show a list of the recent commits with information about them, including commit IDs. Running git diff followed by two commit IDs will compare the two versions of the code in those commits. If you need a refresher, you may want to rewatch this video.
Entering commit IDs

If it is easier, you may enter the first four or more characters of the commit ID rather than pasting the entire ID.

Git command review

Compare two commits, printing each line that is present in one commit but not the other.

git diff will do this. It takes two arguments - the two commit ids to compare.
In order for the changes adding the mute button to be shown as additions, the commit with the mute button needs to be the second argument to git diff. That is because git diff considers the first argument as the "original", and the second argument as the "new" version, so additions are lines present in the second argument but not the first. 

git diff ID1 ID2: compare two commits in the repository
git diff: compare the working directory and the staging area
git diff --staged: compare the staging area and the repository directory
git reset --hard:discard any changes either in the working directory or the stage area, you can't be bcak, you lost your work because you have not commit yet.
Make a copy of an entire Git repository, including the history, onto your own computer.

git clone will do this. It takes one argument - the url of the repository to copy.

Temporarily reset all files in a directory to their state at the time of a specific commit.

git checkout will do this. It takes one argument - the commit ID to restore.

Show the commits made in this repository, starting with the most recent.

git log will do this. It doesn't take any arguments.

'git init' to start to use git with that project, 'git status' to check the status

NB: git branch: to see the branches, the one with the star is where are you working
git branch NAME: create the new branch called NAME
git checkout NAME: move to work in the branch NAME


 Very important: if after git checkout commitID you make modifications, these are 
not reachable unless you create a new branch git checkout -b new_branch_name

NB: git log --graph --oneline master coins

NB: git merge branch_name_1 branch_name2
the branch were you are checkout when you merging is merged as well
git merge --abort
git show commitID to compare a commit to its parent
