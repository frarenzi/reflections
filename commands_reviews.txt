Francesca's Version Control Command review


Install git:
	sudo apt-get install git

	website: https://git-scm.com/downloads

Start to use git with that project:
	git init

Make a copy of an entire Git repository, including the history, onto your own computer:
	git clone URLaddress
	example:git clone https://github.com/udacity/asteroids.git
	!!-> if you clone from a URL, than the repository will automatically have a remote named origin

Configure color for git:
	git config --global color.ui auto

Configure user:
	git config --global user.name "Francesca Renzi"
	git config --global user.email "frarenzi@gmail.com"

Configure editor to open for writing the commits:
	git config --global --unset-all core.editor
	git config --global core.editor "gvim -f"

Check the status:
	git status

Show the commits made in this repository, starting with the most recent:
	git log
	Nb: To stop viewing git log output, press q (which stands for quit)

Show the last commit:
	git log -n 1
	
Temporarily reset all files in a directory to their state at the time of a specific commit:
	git checkout commitID 

Difference between two files in Windows (prompt command):
	FC old.txt new.txt

Difference between two files in Mac or Linux (prompt command):
	diff -u old.txt new.txt

Compare two commits in the repository:
	git diff ID1old ID2new 

Compare the working directory and the staging area:
	git diff

Compare the staging area and the repository directory:
	git diff --staged 

Discard any changes either in the working directory or the stage area
(You can't be back, you lost your work because you have not commit yet):
	git reset --hard

See the branches (the one with the star is where you are working):
	git branch

Create the new branch called NAME:
	git branch NAME

Move to work in the branch NAME:
	git checkout NAME
 	!!-> if after git checkout commitID you make modifications, these are 
	not reachable unless you create a new branch git checkout -b new_branch_name

Compare a commit to its parent:
	git show commitID

Merge two branches:
	git merge branch_name_1 branch_name2
	!!->the branch where you are checkout when you merging is merged as well

Abort the current conflict resolution process:
	git merge --abort
	!!->not always possible to reconstruct the pre-merge state

Delete branch:
	git branch -d branch_name_1

Add a file to a staging area:
	git add FileName

Commit contents of the staging area to the repository:
	git commit
	!!->a window is opened to describe the changes performed. Each commit should have one clear,
	logical purpose, and you should never do too much work without committing.

Change the the wording of the most-recent commit message:
	git commit --amend	

Add forgotten files to commit:
	1_ edit the files
	2_ save the files
	3_ stage the files
	4_ git commit --amend

Reverses a given commit and creates a new commit to record the change:
	git revert commitID
	!!-> for instance, what was added will be deleted!

Erases commits -should be done in order!)	
	git reset 
	!!-> dangerous command, if run for mistake look for git-reflog command

Check the relation between two branches:
	git log --graph --oneline Branch1Name Branch2Name

Check the relation between all branches in the repository:
 	git log --oneline --graph --decorate --all 

Add a remote named ORIGIN for the repository at URL:
	git remote add ORIGIN URL
	example: git remote add origin https://github.com/frarenzi/reflections.git

Show the list of remotes with details about the connections:
	git remote -v

Configure git to not write your crediantial when you talk with gitHub:
	git config --global credential.helper cache
	git config --global credential.helper 'cache --timeout=3600'

Update remote named origin with the local repository: 
	git push origin LocalName
	example: git push origin master
	
Retrieve updates and automatically merge updates (Incorporate changes from a remote repoitory into the current branch, LocalName):
	git pull origin LocalName

Retrieve updates (Download object/branches from another repository):
	git fetch origin
	!!-> running 'git fetch origin' and 'git merge master origin/master' is
	equivalent of git pull origin master. 'git fetch' updates the origin/master to 
	the version available in the remote repository, but your local master unmoves.
	For this reason, you do 'git merge', to update your local master to ther origin/master.
	At the end it is good doing 'git push' to keep the track of the commit on the 
	remote repoitory.
	!!-> to do when both the remote repository and the local repository have
	changes.
